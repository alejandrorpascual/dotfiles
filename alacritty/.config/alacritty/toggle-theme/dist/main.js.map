{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import fs from 'fs/promises'\nimport path from 'path'\nimport yaml from 'js-yaml'\nimport deepcopy from 'deepcopy'\nimport {AlacrittyTypes} from './types/alacrittyTypes'\n\ntype Schemes = 'nightfox' | 'dawnfox' | undefined\n\nasync function readFile(filePath: string, theme: Schemes) {\n  if (!theme) {\n    throw new Error('Enter dawnfox or nightfox as a second argument')\n  }\n\n  try {\n    console.log('path.dirname(filePath) :>> ', path.dirname(filePath));\n    await fs.copyFile(filePath, 'alacritty-backup.yml')\n    const fileContents = await fs.readFile(filePath, 'utf-8')\n    const oldObj = yaml.load(fileContents) as AlacrittyTypes\n    const newObj = deepcopy(oldObj)\n\n    if (theme === 'dawnfox') {\n      newObj.colors = newObj.schemes.DawnFox\n    } else {\n      newObj.colors = newObj.schemes.NighFox\n    }\n\n    console.log(yaml.dump(newObj, {indent: 2}))\n    // await fs.writeFile(filePath, yaml.dump(obj))\n  } catch (e) {\n    console.error(e)\n  }\n}\n\n// FIX: type casting\nconst [, , filePath, theme] = process.argv as [string, string, string, Schemes]\nreadFile(filePath, theme)\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,sBAAe;AACf,kBAAiB;AACjB,qBAAiB;AACjB,sBAAqB;AAKrB,wBAAwB,WAAkB,QAAgB;AACxD,MAAI,CAAC,QAAO;AACV,UAAM,IAAI,MAAM;AAAA;AAGlB,MAAI;AACF,YAAQ,IAAI,+BAA+B,oBAAK,QAAQ;AACxD,UAAM,wBAAG,SAAS,WAAU;AAC5B,UAAM,eAAe,MAAM,wBAAG,SAAS,WAAU;AACjD,UAAM,SAAS,uBAAK,KAAK;AACzB,UAAM,SAAS,6BAAS;AAExB,QAAI,WAAU,WAAW;AACvB,aAAO,SAAS,OAAO,QAAQ;AAAA,WAC1B;AACL,aAAO,SAAS,OAAO,QAAQ;AAAA;AAGjC,YAAQ,IAAI,uBAAK,KAAK,QAAQ,EAAC,QAAQ;AAAA,WAEhC,GAAP;AACA,YAAQ,MAAM;AAAA;AAAA;AAKlB,MAAM,CAAC,EAAE,EAAE,UAAU,SAAS,QAAQ;AACtC,SAAS,UAAU;",
  "names": []
}
